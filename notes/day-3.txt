interaction between two nested components:
	a. passing data from parent to child/nested (custom attribute of a component which can receive data from parent)
		declare a property in the nested component with Input() decorator
		use the property from parent component to pass the data to nested component
	b. passing data from nested to its parent
		create an event in the nested component (declare a property in the nested component class and assign the property to an object of EventEmitter<T>)
		fire the event from the nested component (by callin the emit() method) and pass the data trough that event to the parent
		in the parent component design, bind the event of the nested component with the method of parent component class


View												code
property binding
<element [attribute]="data">	        data=100


component life cycle
1. creation:
	a. constructor
	b. changes (event)
	c. init (event)

2. updation
	a. changes
	...........

3. destruction
	a. destroy
	

event-name				interface-name			method-name
----------------------------------------------------------
X								OnX							ngOnX

changes						OnChanges					ngOnChanges

service and dependency injection:
register the service:
	a. service is consumed by one artifact (component/directive/pipe/module/service), then register the service at that artifact level

token => service
ProductService => ProductService

	b. service is consumed by any artifact of a feature module, then register the service at that feature module level

	c. service is consumed by any artifact from the entire application across all modules, then register the service at root module level

	injector => at 3 levels

	@Inject() => decorator for method parameter. It tells angular to create an instance of service class associated/identified by a token, passed to @Inject() decorator

	@Injectable() => marks an artifact as eligible for dependency injection


URL												method			data		response
http://127.0.0.1:3003/products			GET				NA			{ "message":"", data:[{},{},...]}

http://127.0.0.1:3003/products/{id}	GET				id			{ "message":"", data:{} }
																			{ "message":"", data:null }

http://127.0.0.1:3003/products/{id}	DELETE			id			{ "message":"", data:[{},{},...] }
																			{ "message":"", data:null }

http://127.0.0.1:3003/products/{id}	PUT			id, product	{ "message":"", data:[{},{},..] }
																			{ "message":"", data:null }

http://127.0.0.1:3003/products			POST			product	{ "message":"", data:[{},{},...] }
																			{ "message":"", data:null }


Making HTTP Requests from Angular:
HttpClient => built-in service class
HttpClientModule => module with which HttpClient is registered
@angular/common/http => package


DashBoard
Home		Products			Add Product

Routing:
app.module.ts
localhost:4200 => Home
localhost:4200/home => Home
localhost:4200/anything-else => PageNotFound

product.module.ts
localhost:4200/products => ProductList
localhost:4200/products/view/{id} => ProductDetail
localhost:4200/products/update/{id} => UpdateProduct
localhost:4200/products/add => AddProduct



@angular/router => package

simple types: Route, Routes (Route[])
directives: routerLink etc.
service: Router, ActivatedRoute
components: <router-outlet></router-outlet>
module: RouterModule

1. create route type instances
2. create an array with those routes
3. register the array with angular router framework







